import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
import database as db
from sqlalchemy.orm import Session
from sqlalchemy import func
import os
from dotenv import load_dotenv

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.WARNING)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
ADD_PART = 1

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
main_keyboard = ReplyKeyboardMarkup([
    ['/add', '/search'],
    ['/list', '/stats']
], resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        'üöó –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —É—á–µ—Ç–∞ –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–µ–π!\n\n'
        '–ö–æ–º–∞–Ω–¥—ã:\n'
        '/add - –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—á–∞—Å—Ç—å\n'
        '/search - –ü–æ–∏—Å–∫ –∑–∞–ø—á–∞—Å—Ç–∏\n'
        '/list - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–ø—á–∞—Å—Ç–µ–π\n'
        '/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n'
        '/cancel - –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏',
        reply_markup=main_keyboard
    )

async def add_part_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        '–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—á–∞—Å—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n'
        '–ù–∞–∑–≤–∞–Ω–∏–µ\n'
        '–ú–∞—Ä–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è\n'
        '–ú–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è\n'
        '–ù–æ–º–µ—Ä –∑–∞–ø—á–∞—Å—Ç–∏\n'
        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ\n'
        '–¶–µ–Ω–∞\n'
        '–ú–µ—Å—Ç–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è\n'
        '–û–ø–∏—Å–∞–Ω–∏–µ\n\n'
        '–ü—Ä–∏–º–µ—Ä:\n'
        '–¢–æ—Ä–º–æ–∑–Ω–æ–π –¥–∏—Å–∫\n'
        'Toyota\n'
        'Camry\n'
        '43512-06060\n'
        '2\n'
        '4500\n'
        '–°—Ç–µ–ª–ª–∞–∂ –ê1\n'
        '–ù–æ–≤—ã–π, –æ—Ä–∏–≥–∏–Ω–∞–ª\n\n'
        '–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã',
        reply_markup=ReplyKeyboardRemove()
    )
    return ADD_PART

async def add_part_process(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        data = update.message.text.split('\n')
        if len(data) < 7:
            await update.message.reply_text('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö. –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 7 —Å—Ç—Ä–æ–∫! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:')
            return ADD_PART
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—á–∞—Å—Ç—å
        part = db.AutoPart(
            name=data[0].strip(),
            car_brand=data[1].strip(),
            car_model=data[2].strip(),
            part_number=data[3].strip(),
            quantity=int(data[4].strip()),
            price=float(data[5].strip()),
            location=data[6].strip(),
            description=data[7].strip() if len(data) > 7 else ''
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        session = db.Session()
        session.add(part)
        session.commit()
        session.close()
        
        await update.message.reply_text('‚úÖ –ó–∞–ø—á–∞—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!', reply_markup=main_keyboard)
        return ConversationHandler.END
        
    except ValueError:
        await update.message.reply_text('‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á–∏—Å–µ–ª (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–ª–∏ —Ü–µ–Ω–∞). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:')
        return ADD_PART
    except Exception as e:
        await update.message.reply_text(f'‚ùå –û—à–∏–±–∫–∞: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:', reply_markup=main_keyboard)
        return ConversationHandler.END

async def search_part(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text('üîç –í–≤–µ–¥–∏—Ç–µ —á—Ç–æ –∏—Å–∫–∞—Ç—å: /search <—Ç–µ–∫—Å—Ç>')
        return
    
    search_text = ' '.join(context.args)
    session = db.Session()
    
    try:
        # –ò—â–µ–º –ø–æ –≤—Å–µ–º –ø–æ–ª—è–º
        results = session.query(db.AutoPart).filter(
            (db.AutoPart.name.ilike(f'%{search_text}%')) |
            (db.AutoPart.car_brand.ilike(f'%{search_text}%')) |
            (db.AutoPart.car_model.ilike(f'%{search_text}%')) |
            (db.AutoPart.part_number.ilike(f'%{search_text}%'))
        ).all()
        
        if not results:
            await update.message.reply_text('‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
            return
        
        response = f'üîç –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø—á–∞—Å—Ç–µ–π: {len(results)}\n\n'
        for part in results:
            response += (
                f'üè∑Ô∏è {part.name}\n'
                f'üöó {part.car_brand} {part.car_model}\n'
                f'üî¢ –ù–æ–º–µ—Ä: {part.part_number}\n'
                f'üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {part.quantity}\n'
                f'üí∞ –¶–µ–Ω–∞: {part.price} —Ä—É–±.\n'
                f'üìç –ú–µ—Å—Ç–æ: {part.location}\n'
                f'üìù {part.description}\n'
                f'‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n'
            )
        
        # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(response) > 4000:
            for i in range(0, len(response), 4000):
                await update.message.reply_text(response[i:i+4000])
        else:
            await update.message.reply_text(response)
            
    finally:
        session.close()

async def list_parts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = db.Session()
    
    try:
        parts = session.query(db.AutoPart).all()
        if not parts:
            await update.message.reply_text('üì¶ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞')
            return
        
        response = f'üìã –í—Å–µ–≥–æ –∑–∞–ø—á–∞—Å—Ç–µ–π: {len(parts)}\n\n'
        for part in parts:
            response += f'‚Ä¢ {part.name} ({part.car_brand} {part.car_model}) - {part.quantity} —à—Ç.\n'
        
        await update.message.reply_text(response)
        
    finally:
        session.close()

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = db.Session()
    
    try:
        total_parts = session.query(db.AutoPart).count()
        total_quantity = session.query(func.sum(db.AutoPart.quantity)).scalar() or 0          
        unique_brands = session.query(db.AutoPart.car_brand).distinct().count()
        total_value = session.query(func.sum(db.AutoPart.price * db.AutoPart.quantity)).scalar() or 0
        
        response = (
            f'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n'
            f'‚Ä¢ –í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π: {total_parts}\n'
            f'‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {total_quantity} —à—Ç.\n'
            f'‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–∞—Ä–æ–∫: {unique_brands}\n'
            f'‚Ä¢ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_value:.2f} —Ä—É–±.'
        )
        
        await update.message.reply_text(response)
        
    finally:
        session.close()

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞', reply_markup=main_keyboard)
    return ConversationHandler.END

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f'Update {update} caused error {context.error}')

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db.init_db()
    
    # –°–æ–∑–¥–∞–µ–º Application
    application = Application.builder().token(TOKEN).build()
    
    # ConversationHandler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø—á–∞—Å—Ç–∏
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('add', add_part_start)],
        states={
            ADD_PART: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_part_process)]
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        allow_reentry=True
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("search", search_part))
    application.add_handler(CommandHandler("list", list_parts))
    application.add_handler(CommandHandler("stats", stats))
    application.add_handler(CommandHandler("cancel", cancel))
    
    application.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()

if __name__ == '__main__':
    main()
